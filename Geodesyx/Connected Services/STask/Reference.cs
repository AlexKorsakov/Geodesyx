//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Geodesyx.STask {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="STask.IOracleWcfService")]
    public interface IOracleWcfService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOracleWcfService/ExecuteNonQuery", ReplyAction="http://tempuri.org/IOracleWcfService/ExecuteNonQueryResponse")]
        int ExecuteNonQuery(string query, System.Collections.Generic.List<Oracle.ManagedDataAccess.Client.OracleParameter> param, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOracleWcfService/ExecuteNonQuery", ReplyAction="http://tempuri.org/IOracleWcfService/ExecuteNonQueryResponse")]
        System.Threading.Tasks.Task<int> ExecuteNonQueryAsync(string query, System.Collections.Generic.List<Oracle.ManagedDataAccess.Client.OracleParameter> param, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOracleWcfService/SelectCurrentFromSequence", ReplyAction="http://tempuri.org/IOracleWcfService/SelectCurrentFromSequenceResponse")]
        int SelectCurrentFromSequence(string sequence_name, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOracleWcfService/SelectCurrentFromSequence", ReplyAction="http://tempuri.org/IOracleWcfService/SelectCurrentFromSequenceResponse")]
        System.Threading.Tasks.Task<int> SelectCurrentFromSequenceAsync(string sequence_name, string connectionString);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOracleWcfServiceChannel : Geodesyx.STask.IOracleWcfService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OracleWcfServiceClient : System.ServiceModel.ClientBase<Geodesyx.STask.IOracleWcfService>, Geodesyx.STask.IOracleWcfService {
        
        public OracleWcfServiceClient() {
        }
        
        public OracleWcfServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OracleWcfServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OracleWcfServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OracleWcfServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int ExecuteNonQuery(string query, System.Collections.Generic.List<Oracle.ManagedDataAccess.Client.OracleParameter> param, string connectionString) {
            return base.Channel.ExecuteNonQuery(query, param, connectionString);
        }
        
        public System.Threading.Tasks.Task<int> ExecuteNonQueryAsync(string query, System.Collections.Generic.List<Oracle.ManagedDataAccess.Client.OracleParameter> param, string connectionString) {
            return base.Channel.ExecuteNonQueryAsync(query, param, connectionString);
        }
        
        public int SelectCurrentFromSequence(string sequence_name, string connectionString) {
            return base.Channel.SelectCurrentFromSequence(sequence_name, connectionString);
        }
        
        public System.Threading.Tasks.Task<int> SelectCurrentFromSequenceAsync(string sequence_name, string connectionString) {
            return base.Channel.SelectCurrentFromSequenceAsync(sequence_name, connectionString);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="STask.ITask")]
    public interface ITask {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/SelectTasks", ReplyAction="http://tempuri.org/ITask/SelectTasksResponse")]
        System.Collections.Generic.List<DTOlib.Task> SelectTasks(System.Collections.Generic.List<int> ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/SelectTasks", ReplyAction="http://tempuri.org/ITask/SelectTasksResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DTOlib.Task>> SelectTasksAsync(System.Collections.Generic.List<int> ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/SelectNewTasks", ReplyAction="http://tempuri.org/ITask/SelectNewTasksResponse")]
        System.Collections.Generic.List<DTOlib.Task> SelectNewTasks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/SelectNewTasks", ReplyAction="http://tempuri.org/ITask/SelectNewTasksResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DTOlib.Task>> SelectNewTasksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/SelectTaskIDs_ByStatus", ReplyAction="http://tempuri.org/ITask/SelectTaskIDs_ByStatusResponse")]
        System.Collections.Generic.List<int> SelectTaskIDs_ByStatus(int status_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/SelectTaskIDs_ByStatus", ReplyAction="http://tempuri.org/ITask/SelectTaskIDs_ByStatusResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<int>> SelectTaskIDs_ByStatusAsync(int status_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/Insert", ReplyAction="http://tempuri.org/ITask/InsertResponse")]
        int Insert(DTOlib.Task input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/Insert", ReplyAction="http://tempuri.org/ITask/InsertResponse")]
        System.Threading.Tasks.Task<int> InsertAsync(DTOlib.Task input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/Update", ReplyAction="http://tempuri.org/ITask/UpdateResponse")]
        int Update(int id, string note, int total_time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/Update", ReplyAction="http://tempuri.org/ITask/UpdateResponse")]
        System.Threading.Tasks.Task<int> UpdateAsync(int id, string note, int total_time);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITaskChannel : Geodesyx.STask.ITask, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TaskClient : System.ServiceModel.ClientBase<Geodesyx.STask.ITask>, Geodesyx.STask.ITask {
        
        public TaskClient() {
        }
        
        public TaskClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TaskClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<DTOlib.Task> SelectTasks(System.Collections.Generic.List<int> ids) {
            return base.Channel.SelectTasks(ids);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DTOlib.Task>> SelectTasksAsync(System.Collections.Generic.List<int> ids) {
            return base.Channel.SelectTasksAsync(ids);
        }
        
        public System.Collections.Generic.List<DTOlib.Task> SelectNewTasks() {
            return base.Channel.SelectNewTasks();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DTOlib.Task>> SelectNewTasksAsync() {
            return base.Channel.SelectNewTasksAsync();
        }
        
        public System.Collections.Generic.List<int> SelectTaskIDs_ByStatus(int status_id) {
            return base.Channel.SelectTaskIDs_ByStatus(status_id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<int>> SelectTaskIDs_ByStatusAsync(int status_id) {
            return base.Channel.SelectTaskIDs_ByStatusAsync(status_id);
        }
        
        public int Insert(DTOlib.Task input) {
            return base.Channel.Insert(input);
        }
        
        public System.Threading.Tasks.Task<int> InsertAsync(DTOlib.Task input) {
            return base.Channel.InsertAsync(input);
        }
        
        public int Update(int id, string note, int total_time) {
            return base.Channel.Update(id, note, total_time);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAsync(int id, string note, int total_time) {
            return base.Channel.UpdateAsync(id, note, total_time);
        }
    }
}
